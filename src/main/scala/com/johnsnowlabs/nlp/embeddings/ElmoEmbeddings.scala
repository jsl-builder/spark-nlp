package com.johnsnowlabs.nlp.embeddings

import com.johnsnowlabs.ml.tensorflow._
import com.johnsnowlabs.nlp._
import com.johnsnowlabs.nlp.annotators.common._
import com.johnsnowlabs.nlp.serialization.MapFeature
import com.johnsnowlabs.nlp.util.io.{ExternalResource, ReadAs, ResourceHelper}
import com.johnsnowlabs.storage.HasStorageRef
import org.apache.spark.broadcast.Broadcast
import org.apache.spark.ml.param.{IntArrayParam, IntParam}
import org.apache.spark.ml.util.Identifiable
import org.apache.spark.sql.{DataFrame, SparkSession}


class ElmoEmbeddings(override val uid: String) extends
  AnnotatorModel[ElmoEmbeddings]
  with WriteTensorflowModel
  with HasEmbeddingsProperties
  with HasStorageRef
  with HasCaseSensitiveProperties {

  /** Annotator reference id. Used to identify elements in metadata or to refer to this annotator type */
  override val inputAnnotatorTypes = Array(AnnotatorType.DOCUMENT, AnnotatorType.TOKEN)
  override val outputAnnotatorType: AnnotatorType = AnnotatorType.WORD_EMBEDDINGS
  val batchSize = new IntParam(this, "batchSize", "Batch size. Large values allows faster processing but requires more memory.")
  val vocabulary: MapFeature[String, Int] = new MapFeature(this, "vocabulary")
  val configProtoBytes = new IntArrayParam(this, "configProtoBytes", "ConfigProto from tensorflow, serialized into byte array. Get with config_proto.SerializeToString()")
  val maxSentenceLength = new IntParam(this, "maxSentenceLength", "Max sentence length to process")
  val poolingLayer = new IntParam(this, "poolingLayer", "Set ELMO pooling layer to: -1 for for outputting only the 512 dim word embeddings, -2 for only outputting 1024 sentence embeddings.  Set 0 For both, word and sentence embeddings")
  private var _model: Option[Broadcast[TensorflowElmo]] = None

  def this() = this(Identifiable.randomUID("ELMO_EMBEDDINGS"))

  def setBatchSize(size: Int): this.type = {
    if (get(batchSize).isEmpty)
      set(batchSize, size)
    this
  }

  def setVocabulary(value: Map[String, Int]): this.type = set(vocabulary, value)

  def setConfigProtoBytes(bytes: Array[Int]): ElmoEmbeddings.this.type = set(this.configProtoBytes, bytes)

  def setMaxSentenceLength(value: Int): this.type = {
    if (get(maxSentenceLength).isEmpty)
      set(maxSentenceLength, value)
    this
  }

  /** Function used to set the embedding output layer of the ELMO model
    * word_emb: the character-based word representations with shape [batch_size, max_length, 512].  == -3
    * lstm_outputs1: the first LSTM hidden state with shape [batch_size, max_length, 1024]. === -2
    * lstm_outputs2: the second LSTM hidden state with shape [batch_size, max_length, 1024]. === -1
    * elmo: the weighted sum of the 3 layers, where the weights are trainable. This tensor has shape [batch_size, max_length, 1024]  == 0
    *
    * @param layer Layer specification
    */
  def setPoolingLayer(layer: Int): this.type = {
    layer match {
      case 0 => set(poolingLayer, 0)
      case -1 => set(poolingLayer, -1)
      case -2 => set(poolingLayer, -2)
      case -2 => set(poolingLayer, -3)

      case _ => throw new MatchError("poolingLayer must be either 0, -1, -2 or -3  Definitions : -3 = word_emb, -2 = lstm1, -1=lmst2 , 0=elmo")
    }
  }

  def getMaxSentenceLength: Int = $(maxSentenceLength)

  def getPoolingLayer: Int = $(poolingLayer)

  setDefault(
    batchSize -> 32,
    maxSentenceLength -> 64,
    poolingLayer -> 0
  )

  def setModelIfNotSet(spark: SparkSession, tensorflow: TensorflowWrapper): this.type = {
    if (_model.isEmpty) {

      _model = Some(
        spark.sparkContext.broadcast(
          new TensorflowElmo(
            tensorflow,
            sentenceStartTokenId,
            sentenceEndTokenId,
            maxSentenceLength = $(maxSentenceLength),
            batchSize = $(batchSize),
            configProtoBytes = getConfigProtoBytes
          )
        )
      )
    }

    this
  }

  def sentenceStartTokenId: Int = {
    $$(vocabulary)("<S>")
  }

  def sentenceEndTokenId: Int = {
    $$(vocabulary)("</S>")
  }

  /**
    * takes a document and annotations and produces new annotations of this annotator's annotation type
    *
    * @param annotations Annotations that correspond to inputAnnotationCols generated by previous annotators if any
    * @return any number of annotations processed for every input annotation. Not necessary one to one relationship
    */
  override def annotate(annotations: Seq[Annotation]): Seq[Annotation] = {
    val sentences = TokenizedWithSentence.unpack(annotations)
    if (sentences.nonEmpty) {
      val embeddings = getModelIfNotSet.calculateEmbeddings(sentences, $(poolingLayer))

      WordpieceEmbeddingsSentence.pack(embeddings)
    } else {
      Seq.empty[Annotation]
    }
  }

  def getModelIfNotSet: TensorflowElmo = _model.get.value

  override def onWrite(path: String, spark: SparkSession): Unit = {
    super.onWrite(path, spark)
    writeTensorflowModel(path, spark, getModelIfNotSet.tensorflow, "_elmo", ElmoEmbeddings.tfFile, configProtoBytes = getConfigProtoBytes)
  }

  def getConfigProtoBytes: Option[Array[Byte]] = get(this.configProtoBytes).map(_.map(_.toByte))

  override protected def afterAnnotate(dataset: DataFrame): DataFrame = { // TODO change embedding depending if word or sentence
    wrapEmbeddingsMetadata(dataset.col(getOutputCol), 512, get(storageRef))
    dataset
  }

}

trait ReadablePretrainedElmoModel extends ParamsAndFeaturesReadable[ElmoEmbeddings] with HasPretrained[ElmoEmbeddings] {
  override val defaultModelName = Some("elmo")

  /** Java compliant-overrides */
  override def pretrained(): ElmoEmbeddings = super.pretrained()

  override def pretrained(name: String): ElmoEmbeddings = super.pretrained(name)

  override def pretrained(name: String, lang: String): ElmoEmbeddings = super.pretrained(name, lang)

  override def pretrained(name: String, lang: String, remoteLoc: String): ElmoEmbeddings = super.pretrained(name, lang, remoteLoc)
}

trait ReadElmoTensorflowModel extends ReadTensorflowModel {
  this: ParamsAndFeaturesReadable[ElmoEmbeddings] =>

  override val tfFile: String = "elmo_tensorflow"

  def readTensorflow(instance: ElmoEmbeddings, path: String, spark: SparkSession): Unit = {
    val tf = readTensorflowModel(path, spark, "_elmo_tf")
    instance.setModelIfNotSet(spark, tf)
  }


  def loadFromPython(folder: String, spark: SparkSession): ElmoEmbeddings = {

    val wrapper = TensorflowWrapper.read(folder, zipped = false, useBundle = true, tags = Array("serve"))
    val vocab = folder + "/vocab-2016-09-10.txt"
    val vocabResource = new ExternalResource(vocab, ReadAs.TEXT, Map("format" -> "text"))
    val words = ResourceHelper.parseLines(vocabResource).zipWithIndex.toMap
    new ElmoEmbeddings()
      .setVocabulary(words)
      .setModelIfNotSet(spark, wrapper)
  }
}


object ElmoEmbeddings extends ReadablePretrainedElmoModel with ReadElmoTensorflowModel
